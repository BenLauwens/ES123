### A Pluto.jl notebook ###
# v0.12.21

using Markdown
using InteractiveUtils

# ╔═╡ e00967d0-89b4-11eb-031d-c128221e86e1
begin
	using PlutoUI
	using NativeSVG
end

# ╔═╡ f2f3ba34-89b3-11eb-2577-83e1dcfdc1fc
md"""# Case Study: Data Structure Selection

At this point you have learned about Julia’s core data structures, and you have seen some of the algorithms that use them.

This chapter presents a case study with exercises that let you think about choosing data structures and practice using them.
"""

# ╔═╡ def6b6fc-89b4-11eb-2e66-b5cc3e72779d
md"""## Word Frequency Analysis

As usual, you should at least attempt the exercises before you read my solutions.

#### Exercise 13-1

Write a program that reads a file, breaks each line into words, strips whitespace and punctuation from the words, and converts them to lowercase.

!!! tip
    The function isletter tests whether a character is alphabetic.

#### Exercise 13-2

Go to [Project Gutenberg](https://www.gutenberg.org/) and download your favorite out-of-copyright book in plain text format.

Modify your program from the previous exercise to read the book you downloaded, skip over the header information at the beginning of the file, and process the rest of the words as before.

Then modify the program to count the total number of words in the book, and the number of times each word is used.

Print the number of different words used in the book. Compare different books by different authors, written in different eras. Which author uses the most extensive vocabulary?

#### Exercise 13-3

Modify the program from the previous exercise to print the 20 most frequently used words in the book.

#### Exercise 13-4

Modify the previous program to read a word list and then print all the words in the book that are not in the word list. How many of them are typos? How many of them are common words that should be in the word list, and how many of them are really obscure?
"""

# ╔═╡ 9016b5ea-89b5-11eb-062f-b59a784f61da
md"""## Random Numbers

Given the same inputs, most computer programs generate the same outputs every time, so they are said to be deterministic. Determinism is usually a good thing, since we expect the same calculation to yield the same result. For some applications, though, we want the computer to be unpredictable. Games are an obvious example, but there are more.

Making a program truly nondeterministic turns out to be difficult, but there are ways to make it at least seem nondeterministic. One of them is to use algorithms that gen‐ erate *pseudorandom* numbers. Pseudorandom numbers are not truly random because they are generated by a deterministic computation, but just by looking at the numbers it is all but impossible to distinguish them from random.

The function `rand` returns a random float between `0.0` and `1.0` (including `0.0` but not `1.0`). Each time you call rand, you get the next number in a long series. To see a sample, run this loop:

```julia
for i in 1:10 
	x = rand() 
	println(x)
end
```

The function `rand` can take an iterator or array as an argument and return a random element:

```julia
for i in 1:10
	x = rand(1:6)
	print(x, " ") 
end
```

#### Exercise 13-5

Write a function named choosefromhist that takes a histogram as defined in “Dic‐ tionaries as Collections of Counters” and returns a random value from the histogram, chosen with probability in proportion to frequency. For example, for this histogram:

```julia
julia> t = ['a', 'a', 'b'];

julia> histogram(t) 
Dict{Any,Any} with 2 entries:
  'a' => 2
  'b' => 1
```

your function should return `'a'` with probability `32` and `'b'` with probability `13`.
"""

# ╔═╡ 86793ed0-89b6-11eb-1759-cfa1ea349a6b
md"""## Word Histogram

You should attempt the previous exercises before you go on. You will also need the *emma.txt* file available from this book’s GitHub repository.

Here is a program that reads a file and builds a histogram of the words in the file:

```julia
function processfile(filename) 
	hist = Dict()
	for line in eachline(filename) 
		processline(line, hist)
	end
	hist
end

function processline(line, hist) 
	line = replace(line, '-' => ' ') 
	for word in split(line)
    	word = string(filter(isletter, [word...])...)
        word = lowercase(word)
        hist[word] = get(hist, word, 0) + 1
	end 
end

hist = processfile("emma.txt");
```

This program reads *emma.txt*, which contains the text of *Emma* by Jane Austen.

`processfile` loops through the lines of the file, passing them one at a time to `processline`. The histogram `hist` is being used as an accumulator.

`processline` uses the function `replace` to replace hyphens with spaces before using `split` to break the line into an array of strings. It traverses the array of words and uses `filter`, `isletter`, and `lowercase` to remove punctuation and convert to lower case. (It is shorthand to say that strings are “converted”; remember that strings are immutable, so a function like `lowercase` returns new strings.)


Finally, `processline` updates the histogram by creating a new item or incrementing an existing one.

To count the total number of words in the file, we can add up the frequencies in the histogram:

```julia
totalwords(hist) = sum(values(hist))
```

The number of different words is just the number of items in the dictionary:

```julia
differentwords(hist) = length(hist)
```

Here is some code to print the results:

```julia
julia> println("Total number of words: ", totalwords(hist))
Total number of words: 162742
julia> println("Number of different words: ", differentwords(hist)) Number of different words: 7380
```
"""

# ╔═╡ 00bea97c-89b8-11eb-23a1-db0c7d6c7bd1
md"""## Most Common Words

To find the most common words, we can make an array of tuples, where each tuple contains a word and its frequency, and sort it. The following function takes a histogram and returns an array of word-frequency tuples:

```julia
function mostcommon(hist) 
	t = []
	for (key, value) in hist 
		push!(t, (value, key))
	end
	reverse(sort(t)) 
end
```

In each tuple, the frequency appears first, so the resulting array is sorted by frequency. Here is a loop that prints the 10 most common words:

```julia
t = mostcommon(hist)
println("The most common words are:") 
for (freq, word) in t[1:10]
	println(word, "\t", freq) 
end
```

I use a tab character (`'\t'`) as a “separator,” rather than a space, so the second column is lined up. Here are the results from *Emma*:

```
The most common words are:
to  5295
the 5266
and 4931
of  4339
i   3191
a   3155
it  2546
her 2483
was 2400
she 2364
```

!!! tip
    This code can be simplified using the `rev` keyword argument of the `sort` function. You can read about it in the documentation.
"""

# ╔═╡ 87a74886-89b8-11eb-29aa-a9c5075a1f95
md"""## Optional Parameters

We have seen built-in functions that take optional arguments. It is possible to write programmer-defined functions with optional arguments, too. For example, here is a function that prints the most common words in a histogram:

```julia
function printmostcommon(hist, num=10)
	t = mostcommon(hist)
	println("The most common words are: ") 
	for (freq, word) in t[1:num]
		println(word, "\t", freq) 
	end
end
```

The first parameter is required; the second is optional. The *default value* of `num` is `10`. If you only provide one argument:

```julia
printmostcommon(hist)
```

`num` gets the default value. If you provide two arguments:

```julia
printmostcommon(hist, 20)
```

`num` gets the value of the argument instead. In other words, the optional argument
overrides the default value.

If a function has both required and optional parameters, all the required parameters have to come first, followed by the optional ones.
"""

# ╔═╡ d5579180-89b8-11eb-27ec-d1b4e811c3cb
md"""## Dictionary Subtraction

Finding the words from a book that are not in the word list from *words.txt* is a problem you might recognize as set subtraction; that is, we want to find all the words from one set (the words in the book) that are not in the other (the words in the list).

`subtract` takes dictionaries `d1` and `d2` and returns a new dictionary that contains all the keys from `d1` that are not in `d2`. Since we don’t really care about the values, we set them all to `nothing`:

```julia
function subtract(d1, d2) res = Dict()
	for key in keys(d1) 
		if key ∉ keys(d2)
			res[key] = nothing 
		end
	end
	res
end
```

To find the words in the book you downloaded that are not in *words.txt*, you can use `processfile` to build a histogram for *words.txt*, and then `subtract`:

```julia
words = processfile("words.txt")
diff = subtract(hist, words)
println("Words in the book that aren't in the word list:") 
for word in keys(diff)
	print(word, " ") 
end
```

Here are some of the results from *Emma*:

```
Words in the book that aren't in the word list:
outree quicksighted outwardly adelaide rencontre jeffereys unreserved dixons 
betweens ...
```

Some of these words are names and possessives. Others, like “rencontre,” are no longer in common use. But a few are common words that should really be in the list!

#### Exercise 13-6

Julia provides a data structure called `Set` that provides many common set operations. You can read about them in “Collections and Data Structures”, or read the documentation.

Write a program that uses set subtraction to find words in the book that are not in the word list.
"""

# ╔═╡ 4ee3d86e-89ba-11eb-1dd8-99e9a315b304
md"""## Random Words

To choose a random word from the histogram, the simplest algorithm is to build an array with multiple copies of each word, according to the observed frequency, and then choose from the array:

```julia
function randomword(h) 
	t=[]
	for (word, freq) in h 
		for i in 1:freq
			push!(t, word) 
		end
	end
	rand(t) 
end
```

This algorithm works, but it is not very efficient; each time you choose a random word it rebuilds the array, which is as big as the original book. An obvious improvement is to build the array once and then make multiple selections, but the array is still big.

An alternative is:

1. Use `keys` to get an array of the words in the book.
2. Build an array that contains the cumulative sum of the word frequencies (see “Exercise 10-2”). The last item in this array is the total number of words in the book, *n*.
3. Choose a random number from 1 to *n*. Use a bisection search (see “Exercise 10-10”) to find the index where the random number would be inserted in the cumulative sum.
4. Use the index to find the corresponding word in the word array.


#### Exercise 13-7

Write a program that uses this algorithm to choose a random word from the book.
"""

# ╔═╡ e697de38-89ba-11eb-0e7c-cb53a52eb709
md"""## Markov Analysis

If you choose words from the book at random, you can get a sense of the vocabulary, but you probably won’t get a sentence:

```
this the small regard harriet which knightley's it most things
```

A series of random words seldom makes sense because there is no relationship between successive words. For example, in a real sentence you would expect an article like “the” to be followed by an adjective or a noun, and probably not a verb or adverb.

One way to measure these kinds of relationships is Markov analysis, which character‐ izes, for a given sequence of words, the probability of the words that might come next. For example, the song “Eric, the Half a Bee” (by Monty Python) begins:

> Half a bee, philosophically, 
> 
> Must, ipso facto, half not be. 
> 
> But half the bee has got to be 
> 
> Vis a vis, its entity. D’you see?
> 
> But can a bee be said to be
> 
> Or not to be an entire bee 
> 
> When half the bee is not a bee 
> 
> Due to some ancient injury?

In this text, the phrase “half the” is always followed by the word “bee,” but the phrase “the bee” might be followed by either “has” or “is.”

The result of Markov analysis is a mapping from each prefix (like “half the” and “the bee”) to all possible suffixes (like “has” and “is”).

Given this mapping, you can generate random text by starting with any prefix and choosing at random from the possible suffixes. Next, you can combine the end of the prefix and the new suffix to form the next prefix, and repeat.

For example, if you start with the prefix “Half a,” then the next word has to be “bee,” because the prefix only appears once in the text. The next prefix is “a bee,” so the next suffix might be “philosophically,” “be,” or “due.”

In this example the length of the prefix is always 2, but you can do Markov analysis with any prefix length.

#### Exercise 13-8

Give Markov analysis a try.

1. Write a program to read text from a file and perform Markov analysis. The result should be a dictionary that maps from prefixes to a collection of possible suffixes. The collection might be an array, tuple, or dictionary; it is up to you to make an appropriate choice. You can test your program with prefix length 2, but you should write the program in a way that makes it easy to try other lengths.
2. Add a function to the previous program to generate random text based on the Markov analysis. Here is an example from *Emma* with prefix length 2:
   > “He was very clever, be it sweetness or be angry, ashamed or only amused, at such a stroke. She had never thought of Hannah till you were never meant for me?” “I cannot make speeches, Emma:” he soon cut it all himself.”
   For this example, I left the punctuation attached to the words. The result is almost syntactically correct, but not quite. Semantically, it almost makes sense, but not quite.
   What happens if you increase the prefix length? Does the random text make more sense?
3. Once your program is working, you might want to try a mash-up: if you combine text from two or more books, the random text you generate will blend the vocabulary and phrases from the sources in interesting ways.

*Credit*: This case study is based on an example from The Practice of Programming by Brian Kernighan and Rob Pike (Addison-Wesley).

!!! tip
    You should attempt this exercise before you go on.
"""

# ╔═╡ aa416bf8-89bb-11eb-00ce-1dadb76ecfc1
md"""## Data Structures

Using Markov analysis to generate random text is fun, but there is also a point to this exercise: data structure selection. In completing the previous exercise, you had to choose:

* How to represent the prefixes
* How to represent the collection of possible suffixes
* How to represent the mapping from each prefix to the collection of possible suffixes

The last one is easy: a dictionary is the obvious choice for a mapping from keys to corresponding values.

For the prefixes, the most obvious options are a string, array of strings, or tuple of strings.

For the suffixes, one option is an array; another is a histogram (dictionary).

How should you choose? The first step is to think about the operations you will need to implement for each data structure. For the prefixes, you need to be able to remove words from the beginning and add to the end. For example, if the current prefix is “Half a,” and the next word is “bee,” you need to be able to form the next prefix, “a bee.”

Your first choice might be an array, since it is easy to add and remove elements.

For the collection of suffixes, the operations you need to perform include adding a new suffix (or increasing the frequency of an existing one) and choosing a random suffix.

Adding a new suffix is equally easy for the array implementation or the histogram. Choosing a random element from an array is easy; choosing from a histogram is harder to do efficiently (see “Exercise 13-7”).

So far we have been talking mostly about ease of implementation, but there are other factors to consider in choosing data structures. One is runtime. Sometimes there is a theoretical reason to expect one data structure to be faster than another; for example, I mentioned that the in operator is faster for dictionaries than for arrays, at least when the number of elements is large.

But often you don’t know ahead of time which implementation will be faster. One option is to implement both of them and see which is better. This approach is called benchmarking. A practical alternative is to choose the data structure that is easiest to implement, and then see if it is fast enough for the intended application. If so, there is no need to go on. If not, there are tools, like the Profile module, that can identify the places in a program that take the most time.

The other factor to consider is storage space. For example, using a histogram for the collection of suffixes might take less space because you only have to store each word once, no matter how many times it appears in the text. In some cases, saving space can also make your program run faster, and in the extreme, your program might not run at all if you run out of memory. But for many applications, space is a secondary consideration after runtime.

One final thought: in this discussion, I have implied that you should use one data structure for both analysis and generation. But since these are separate phases, it would also be possible to use one structure for analysis and then convert to another structure for generation. This would be a net win if the time saved during generation exceeded the time spent in conversion.

!!! tip
    The Julia package `DataStructures` implements a variety of data structures that are tailored to specific problems, such as an ordered dictionary whose entries can be iterated over deterministically.
"""

# ╔═╡ 34c48de6-89bc-11eb-2f60-0de81d83b233
md"""## Debugging
When you are debugging a program, and especially if you are working on a hard bug, there are five things to try:

*Reading*:
Examine your code, read it back to yourself, and check that it says what you meant to say.

*Running*:
Experiment by making changes and running different versions. Often if you dis‐ play the right thing at the right place in the program, the problem becomes obvi‐ ous, but sometimes you have to build scaffolding.

*Ruminating*:
Take some time to think! What kind of error is it: syntax, runtime, or semantic? What information can you get from the error messages, or from the output of the program? What kind of error could cause the problem you’re seeing? What did you change last, before the problem appeared?

*Rubberducking*:
If you explain the problem to someone else, you sometimes find the answer before you finish asking the question. Often you don’t need the other person; you could just talk to a rubber duck. And that’s the origin of the well-known strategy called rubber duck debugging. I’m not making this up!

*Retreating*:
At some point, the best thing to do is back off, undoing recent changes, until you get back to a program that works and that you understand. Then you can start rebuilding.

Beginning programmers sometimes get stuck on one of these activities and forget the others. Each activity comes with its own failure mode.

For example, reading your code might help if the problem is a typographical error, but not if the problem is a conceptual misunderstanding. If you don’t understand what your program does, you can read it 100 times and never see the error, because the error is in your head.

Running experiments can help, especially if you run small, simple tests. But if you run experiments without thinking or reading your code, you might fall into a pattern I call “random walk programming,” which is the process of making random changes until the program does the right thing. Needless to say, random walk programming can take a long time.

You have to take time to think. As I’ve said already, debugging is like an experimental science. You should have at least one hypothesis about what the problem is. If there are two or more possibilities, try to think of a test that would eliminate one of them.

But even the best debugging techniques will fail if there are too many errors, or if the code you are trying to fix is too big and complicated. Sometimes the best option is to retreat, simplifying the program until you get to something that works and that you understand.

Beginning programmers are often reluctant to retreat because they can’t stand to delete a line of code (even if it’s wrong). If it makes you feel better, copy your program into another file before you start stripping it down. Then you can copy the pieces back one at a time.

Finding a hard bug requires reading, running, ruminating, and sometimes retreating. If you get stuck on one of these activities, try the others.
"""

# ╔═╡ 6a8e4a20-89bc-11eb-149c-ed4f0c5d3697
md"""## Glossary

*deterministic*:
Pertaining to a program that does the same thing each time it runs, given the same inputs.

*pseudorandom*:
Pertaining to a sequence of numbers that appears to be random, but is generated by a deterministic program.

*default value*:
The value given to an optional parameter if no argument is provided.

*override*:
To replace a default value with an argument.

*benchmarking*:
The process of choosing between data structures by implementing alternatives and testing them on a sample of the possible inputs.

*rubberducking*:
Debugging by explaining your problem to an inanimate object such as a rubber duck. Articulating the problem can help you solve it, even if the rubber duck doesn’t know Julia.
"""

# ╔═╡ 97b91802-89bc-11eb-1adc-856eeae921ab
md"""## Exercises Exercise 13-9

The “rank” of a word is its position in an array of words sorted by frequency: the most common word has rank 1, the second most common has rank 2, etc.

[Zipf’s law](https://en.wikipedia.org/wiki/Zipf%27s_law) describes a relationship between the ranks and frequencies of words in natural languages. Specifically, it predicts that the frequency, ``f`` , of the word with rank ``r`` is:

```math
f = cr^{−s}
```

where ``s`` and ``c`` are parameters that depend on the language and the text. If you take the logarithm of both sides of this equation, you get: 

```math
\log f = \log c − s \log r
```

So if you plot ``\log f`` versus ``\log r``, you should get a straight line with slope −``s`` and intercept ``\log c``.

Write a program that reads a text from a file, counts word frequencies, and prints one line for each word, in descending order of frequency, with ``\log f`` and ``\log r``.

Install a plotting library:

```julia
julia> using Pkg

julia> pkg"add Plots"
```

Its usage is very easy:
```julia

julia> using Plots 

julia> x = 1:10; 

julia> y = x.^2; 

julia> plot(x, y)
```

Use the Plots library to plot the results and check whether they form a straight line.
"""

# ╔═╡ Cell order:
# ╟─e00967d0-89b4-11eb-031d-c128221e86e1
# ╟─f2f3ba34-89b3-11eb-2577-83e1dcfdc1fc
# ╟─def6b6fc-89b4-11eb-2e66-b5cc3e72779d
# ╟─9016b5ea-89b5-11eb-062f-b59a784f61da
# ╟─86793ed0-89b6-11eb-1759-cfa1ea349a6b
# ╟─00bea97c-89b8-11eb-23a1-db0c7d6c7bd1
# ╟─87a74886-89b8-11eb-29aa-a9c5075a1f95
# ╟─d5579180-89b8-11eb-27ec-d1b4e811c3cb
# ╟─4ee3d86e-89ba-11eb-1dd8-99e9a315b304
# ╟─e697de38-89ba-11eb-0e7c-cb53a52eb709
# ╟─aa416bf8-89bb-11eb-00ce-1dadb76ecfc1
# ╟─34c48de6-89bc-11eb-2f60-0de81d83b233
# ╟─6a8e4a20-89bc-11eb-149c-ed4f0c5d3697
# ╟─97b91802-89bc-11eb-1adc-856eeae921ab
